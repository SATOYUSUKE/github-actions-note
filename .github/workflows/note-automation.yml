name: Note Automation Workflow

on:
  workflow_dispatch:
    inputs:
      theme:
        description: 'üìù Ë®ò‰∫ã„ÅÆ„ÉÜ„Éº„Éû (‰æã: AIÊäÄË°ì„ÅÆÊúÄÊñ∞ÂãïÂêë)'
        required: true
        type: string
        default: 'AIÊäÄË°ì„ÅÆÊúÄÊñ∞ÂãïÂêë'
      target:
        description: 'üë• ÊÉ≥ÂÆöË™≠ËÄÖ (‰æã: „Ç®„É≥„Ç∏„Éã„Ç¢ÂàùÂøÉËÄÖ)'
        required: true
        type: string
        default: '„Ç®„É≥„Ç∏„Éã„Ç¢ÂàùÂøÉËÄÖ'
      message:
        description: 'üí° ‰ºù„Åà„Åü„ÅÑÊ†∏„É°„ÉÉ„Çª„Éº„Ç∏ (‰æã: ÊäÄË°ì„ÅÆÈÄ≤Ê≠©„ÅßÁîüÁî£ÊÄßÂêë‰∏ä)'
        required: true
        type: string
        default: 'ÊäÄË°ì„ÅÆÈÄ≤Ê≠©„ÅßÁîüÁî£ÊÄßÂêë‰∏ä'
      cta:
        description: 'üéØ Ë™≠Âæå„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥ (‰æã: ÂÆüÈöõ„Å´Ë©¶„Åó„Å¶„Åø„Çã)'
        required: true
        type: string
        default: 'ÂÆüÈöõ„Å´Ë©¶„Åó„Å¶„Åø„Çã'
      tags:
        description: 'üè∑Ô∏è „Çø„Ç∞ („Ç´„É≥„ÉûÂå∫Âàá„Çä„ÄÅÊúÄÂ§ß5ÂÄã)'
        required: true
        type: string
        default: 'AI,ÊäÄË°ì,Ëá™ÂãïÂåñ'
      writing_style:
        description: '‚úçÔ∏è Ë®ò‰∫ã„ÅÆ„Çπ„Çø„Ç§„É´ (casual/informative/technical/academic)'
        required: false
        type: string
        default: 'informative'
      content_length:
        description: 'üìè Ë®ò‰∫ã„ÅÆÈï∑„Åï (short/medium/long)'
        required: false
        type: string
        default: 'medium'
      is_public:
        description: 'üåê ÂÖ¨ÈñãË®≠ÂÆö'
        required: true
        type: boolean
        default: false
      dry_run:
        description: 'üß™ „ÉÜ„Çπ„ÉàÂÆüË°å (ÂÆüÈöõ„ÅÆÊäïÁ®ø„Çí„Çπ„Ç≠„ÉÉ„Éó)'
        required: true
        type: boolean
        default: true
  schedule:
    # ÊØéÊó•ÂçàÂâç9ÊôÇ„Å´ÂÆüË°åÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
    - cron: '0 0 * * *'

jobs:
  research:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      research-report: ${{ steps.research.outputs.report }}
      research-progress: ${{ steps.research.outputs.research_job_progress }}
      monitoring-present: ${{ steps.monitoring.outputs.present }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Initialize Workflow Monitoring
        run: |
          echo "WORKFLOW_START_TIME=$(date -u +%s)" >> $GITHUB_ENV
          echo "JOB_START_TIME=$(date -u +%s)" >> $GITHUB_ENV
          
          # „É¢„Éê„Ç§„É´ÂØæÂøú„ÅÆË¶ã„ÇÑ„Åô„ÅÑ„Çµ„Éû„É™„Éº
          echo "# üöÄ NoteËá™ÂãïÂåñ„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÈñãÂßã" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| È†ÖÁõÆ | ÂÄ§ |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| üÜî „ÉØ„Éº„ÇØ„Éï„É≠„ÉºID | \`${{ github.run_id }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚è∞ ÈñãÂßãÊôÇÂàª | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "| üìù „ÉÜ„Éº„Éû | ${{ github.event.inputs.theme || 'AIÊäÄË°ì„ÅÆÊúÄÊñ∞ÂãïÂêë' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üë• ÊÉ≥ÂÆöË™≠ËÄÖ | ${{ github.event.inputs.target || '„Ç®„É≥„Ç∏„Éã„Ç¢ÂàùÂøÉËÄÖ' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚úçÔ∏è „Çπ„Çø„Ç§„É´ | ${{ github.event.inputs.writing_style || 'informative' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üìè Èï∑„Åï | ${{ github.event.inputs.content_length || 'medium' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîç „É™„Çµ„Éº„ÉÅÊ∑±Â∫¶ | ${{ github.event.inputs.research_depth || 'standard' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üß™ „ÉÜ„Çπ„ÉàÂÆüË°å | ${{ github.event.inputs.dry_run || 'true' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä ÈÄ≤ÊçóÁä∂Ê≥Å" >> $GITHUB_STEP_SUMMARY
          echo "- [x] „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÈñãÂßã" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] „É™„Çµ„Éº„ÉÅÂÆüË°å" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Ë®ò‰∫ãÂü∑Á≠Ü" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØ" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] ÊäïÁ®øÂá¶ÁêÜ" >> $GITHUB_STEP_SUMMARY
      
      - name: Run Research Job
        id: research
        run: node jobs/research-job.js
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          THEME: ${{ github.event.inputs.theme || 'AIÊäÄË°ì„ÅÆÊúÄÊñ∞ÂãïÂêë' }}
          TARGET: ${{ github.event.inputs.target || '„Ç®„É≥„Ç∏„Éã„Ç¢ÂàùÂøÉËÄÖ' }}
          MESSAGE: ${{ github.event.inputs.message || 'ÊäÄË°ì„ÅÆÈÄ≤Ê≠©„ÅßÁîüÁî£ÊÄßÂêë‰∏ä' }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_JOB: research
      
      - name: Research Job Summary
        if: always()
        run: |
          JOB_END_TIME=$(date -u +%s)
          JOB_DURATION=$((JOB_END_TIME - JOB_START_TIME))
          
          # „É¢„Éê„Ç§„É´ÂØæÂøú„ÅÆÁµêÊûúË°®Á§∫
          echo "## üìä „É™„Çµ„Éº„ÉÅÁµêÊûú" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # „Çπ„ÉÜ„Éº„Çø„Çπ„Éê„ÉÉ„Ç∏
          if [ "${{ job.status }}" = "success" ]; then
            echo "![Status](https://img.shields.io/badge/„É™„Çµ„Éº„ÉÅ-‚úÖ_ÂÆå‰∫Ü-brightgreen)" >> $GITHUB_STEP_SUMMARY
          else
            echo "![Status](https://img.shields.io/badge/„É™„Çµ„Éº„ÉÅ-‚ùå_Â§±Êïó-red)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # ÁµêÊûú„ÉÜ„Éº„Éñ„É´
          echo "| üìà „É°„Éà„É™„ÇØ„Çπ | ÂÄ§ |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| ‚è±Ô∏è ÂÆüË°åÊôÇÈñì | ${JOB_DURATION}Áßí |" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "outputs/research-report.json" ]; then
            KEY_POINTS=$(jq -r '.keyPoints | length' outputs/research-report.json 2>/dev/null || echo "0")
            SOURCES=$(jq -r '.sources | length' outputs/research-report.json 2>/dev/null || echo "0")
            QUALITY=$(jq -r '.metadata.qualityScore * 100 | floor' outputs/research-report.json 2>/dev/null || echo "0")
            
            echo "| üîë ÈáçË¶Å„Éù„Ç§„É≥„Éà | ${KEY_POINTS}ÂÄã |" >> $GITHUB_STEP_SUMMARY
            echo "| üìö ÊÉÖÂ†±Ê∫ê | ${SOURCES}ÂÄã |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚≠ê ÂìÅË≥™„Çπ„Ç≥„Ç¢ | ${QUALITY}% |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # ÈÄ≤ÊçóÊõ¥Êñ∞
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä ÂÖ®‰ΩìÈÄ≤Êçó" >> $GITHUB_STEP_SUMMARY
          echo "- [x] „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÈñãÂßã" >> $GITHUB_STEP_SUMMARY
          echo "- [x] „É™„Çµ„Éº„ÉÅÂÆüË°å" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Ë®ò‰∫ãÂü∑Á≠Ü" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØ" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] ÊäïÁ®øÂá¶ÁêÜ" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Research Report
        uses: actions/upload-artifact@v4
        with:
          name: research-report
          path: outputs/research-report.json
          retention-days: 1
        id: upload_research_report
      
      - name: Verify Research Report Upload
        run: |
          if [ "${{ steps.upload_research_report.outcome }}" = "success" ]; then
            echo "‚úÖ Research report uploaded successfully"
            echo "Artifact ID: ${{ steps.upload_research_report.outputs.artifact-id }}"
          else
            echo "‚ùå Research report upload failed"
            exit 1
          fi
      
      - name: Upload Error Reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: research-errors
          path: outputs/errors/
          retention-days: 7
      
      - name: Check Monitoring Files
        id: monitoring
        run: |
          echo "üîç Checking for monitoring files..."
          if [ -d "outputs/monitoring" ]; then
            echo "üìÅ outputs/monitoring directory exists"
            file_count=$(find outputs/monitoring -type f 2>/dev/null | wc -l)
            echo "üìä Found $file_count files in outputs/monitoring"
            if [ "$file_count" -gt 0 ]; then
              echo "present=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Monitoring files found in outputs/monitoring"
              ls -la outputs/monitoring/
            else
              echo "present=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è outputs/monitoring directory exists but is empty"
            fi
          else
            echo "present=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è outputs/monitoring directory does not exist"
          fi
          echo "üè∑Ô∏è monitoring-present output set to: $(cat $GITHUB_OUTPUT | grep present= | cut -d= -f2)"
      
      - name: Upload Monitoring Data
        if: ${{ steps.monitoring.outputs.present == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: research-monitoring
          path: outputs/monitoring/
          retention-days: 3
          if-no-files-found: ignore
        id: upload_monitoring
      
      - name: Verify Monitoring Upload
        if: ${{ steps.monitoring.outputs.present == 'true' }}
        run: |
          if [ "${{ steps.upload_monitoring.outcome }}" = "success" ]; then
            echo "‚úÖ Research monitoring uploaded successfully"
          else
            echo "‚ö†Ô∏è Research monitoring upload failed or skipped"
          fi

  writing:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: research
    outputs:
      article: ${{ steps.writing.outputs.article }}
      writing-progress: ${{ steps.writing.outputs.writing_job_progress }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Initialize Job Monitoring
        run: |
          echo "JOB_START_TIME=$(date -u +%s)" >> $GITHUB_ENV
          echo "## ‚úçÔ∏è Writing Job Starting" >> $GITHUB_STEP_SUMMARY
      
      - name: Debug Research Job Outputs
        run: |
          echo "üîç Research Job Output Values:"
          echo "  research-report: ${{ needs.research.outputs.research-report }}"
          echo "  research-progress: ${{ needs.research.outputs.research-progress }}"
          echo "  monitoring-present: ${{ needs.research.outputs.monitoring-present }}"
          echo "  research job result: ${{ needs.research.result }}"
      
      - name: Download Research Report
        uses: actions/download-artifact@v4
        with:
          name: research-report
          path: inputs/
        continue-on-error: true
        id: download_research
      
      - name: Retry Download Research Report
        if: steps.download_research.outcome == 'failure'
        uses: actions/download-artifact@v4
        with:
          name: research-report
          path: inputs/
        continue-on-error: true
        id: retry_download_research
      
      - name: Verify Research Report
        run: |
          if [ ! -f "inputs/research-report.json" ]; then
            echo "‚ùå Research report not found after download attempts"
            echo "Available files in inputs/:"
            ls -la inputs/ || echo "inputs/ directory not found"
            echo "Checking if research job completed successfully..."
            echo "Research job status: ${{ needs.research.result }}"
            exit 1
          else
            echo "‚úÖ Research report successfully downloaded"
            echo "File size: $(stat -c%s inputs/research-report.json) bytes"
          fi
      
      - name: Download Research Monitoring
        if: ${{ needs.research.outputs.monitoring-present == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: research-monitoring
          path: inputs/monitoring/
        continue-on-error: true
        id: download_monitoring
      
      - name: Verify Monitoring Download
        run: |
          echo "üîç Monitoring Download Status:"
          echo "  monitoring-present: ${{ needs.research.outputs.monitoring-present }}"
          echo "  download step condition met: ${{ needs.research.outputs.monitoring-present == 'true' }}"
          
          if [ "${{ needs.research.outputs.monitoring-present }}" = "true" ]; then
            if [ "${{ steps.download_monitoring.outcome }}" = "failure" ]; then
              echo "‚ö†Ô∏è Research monitoring artifact not found, but was expected"
              echo "This might be due to a timing issue or the monitoring files were not actually uploaded"
              echo "Continuing without monitoring data..."
            elif [ "${{ steps.download_monitoring.outcome }}" = "success" ]; then
              echo "‚úÖ Research monitoring data downloaded successfully"
            else
              echo "‚ÑπÔ∏è Monitoring download step was skipped (outcome: ${{ steps.download_monitoring.outcome }})"
            fi
          else
            echo "‚ÑπÔ∏è Monitoring download skipped - monitoring-present is false"
          fi
      
      - name: Run Writing Job
        id: writing
        run: node jobs/writing-job.js
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          THEME: ${{ github.event.inputs.theme || 'AIÊäÄË°ì„ÅÆÊúÄÊñ∞ÂãïÂêë' }}
          TARGET: ${{ github.event.inputs.target || '„Ç®„É≥„Ç∏„Éã„Ç¢ÂàùÂøÉËÄÖ' }}
          MESSAGE: ${{ github.event.inputs.message || 'ÊäÄË°ì„ÅÆÈÄ≤Ê≠©„ÅßÁîüÁî£ÊÄßÂêë‰∏ä' }}
          CTA: ${{ github.event.inputs.cta || 'ÂÆüÈöõ„Å´Ë©¶„Åó„Å¶„Åø„Çã' }}
          TAGS: ${{ github.event.inputs.tags || 'AI,ÊäÄË°ì,Ëá™ÂãïÂåñ' }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_JOB: writing
      
      - name: Writing Job Summary
        if: always()
        run: |
          JOB_END_TIME=$(date -u +%s)
          JOB_DURATION=$((JOB_END_TIME - JOB_START_TIME))
          echo "## üìù Writing Job Results" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Duration:** ${JOB_DURATION}s" >> $GITHUB_STEP_SUMMARY
          if [ -f "outputs/article-draft.json" ]; then
            echo "**Title:** $(jq -r '.title' outputs/article-draft.json)" >> $GITHUB_STEP_SUMMARY
            echo "**Word Count:** $(jq -r '.originalArticle.metadata.wordCount' outputs/article-draft.json)" >> $GITHUB_STEP_SUMMARY
            echo "**Quality Score:** $(jq -r '.originalArticle.qualityScore * 100 | floor')%" outputs/article-draft.json >> $GITHUB_STEP_SUMMARY
            echo "**Reading Time:** $(jq -r '.originalArticle.metadata.estimatedReadingTime')min" outputs/article-draft.json >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload Article Draft
        uses: actions/upload-artifact@v4
        with:
          name: article-draft
          path: outputs/article-draft.json
          retention-days: 1
      
      - name: Upload Error Reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: writing-errors
          path: outputs/errors/
          retention-days: 7
      
      - name: Upload Monitoring Data
        if: ${{ hashFiles('outputs/monitoring/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: writing-monitoring
          path: outputs/monitoring/
          retention-days: 3
          if-no-files-found: ignore

  fact-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: writing
    outputs:
      verified-article: ${{ steps.fact-check.outputs.verified-article }}
      fact-check-progress: ${{ steps.fact-check.outputs.fact_check_job_progress }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Initialize Job Monitoring
        run: |
          echo "JOB_START_TIME=$(date -u +%s)" >> $GITHUB_ENV
          echo "## üîç Fact Check Job Starting" >> $GITHUB_STEP_SUMMARY
      
      - name: Download Article Draft
        uses: actions/download-artifact@v4
        with:
          name: article-draft
          path: inputs/
      
      - name: Download Research Report
        uses: actions/download-artifact@v4
        with:
          name: research-report
          path: inputs/
      
      - name: Run Fact Check Job
        id: fact-check
        run: node jobs/fact-check-job.js
        env:
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_JOB: fact-check
      
      - name: Fact Check Job Summary
        if: always()
        run: |
          JOB_END_TIME=$(date -u +%s)
          JOB_DURATION=$((JOB_END_TIME - JOB_START_TIME))
          echo "## üîç Fact Check Job Results" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Duration:** ${JOB_DURATION}s" >> $GITHUB_STEP_SUMMARY
          if [ -f "outputs/verified-article.json" ]; then
            echo "**Overall Score:** $(jq -r '.factCheck.overallScore * 100 | floor')%" outputs/verified-article.json >> $GITHUB_STEP_SUMMARY
            echo "**Claims Verified:** $(jq -r '.factCheck.claimsVerified' outputs/verified-article.json)" >> $GITHUB_STEP_SUMMARY
            echo "**Corrections Applied:** $(jq -r '.factCheck.correctionsApplied' outputs/verified-article.json)" >> $GITHUB_STEP_SUMMARY
            echo "**Readiness Level:** $(jq -r '.factCheck.finalValidation.readinessLevel' outputs/verified-article.json)" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload Verified Article
        uses: actions/upload-artifact@v4
        with:
          name: verified-article
          path: outputs/verified-article.json
          retention-days: 1
      
      - name: Upload Fact Check Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fact-check-reports
          path: outputs/fact-check/
          retention-days: 7
      
      - name: Upload Error Reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: fact-check-errors
          path: outputs/errors/
          retention-days: 7
      
      - name: Upload Monitoring Data
        if: ${{ hashFiles('outputs/monitoring/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: fact-check-monitoring
          path: outputs/monitoring/
          retention-days: 3
          if-no-files-found: ignore

  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: fact-check
    outputs:
      publish-result: ${{ steps.publish.outputs.publish-result }}
      publish-progress: ${{ steps.publish.outputs.publishing_job_progress }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install chromium
      
      - name: Initialize Job Monitoring
        run: |
          echo "JOB_START_TIME=$(date -u +%s)" >> $GITHUB_ENV
          echo "## üì§ Publishing Job Starting" >> $GITHUB_STEP_SUMMARY
      
      - name: Download Verified Article
        uses: actions/download-artifact@v4
        with:
          name: verified-article
          path: inputs/
      
      - name: Run Publishing Job
        id: publish
        run: node jobs/publishing-job.js
        env:
          NOTE_STORAGE_STATE_JSON: ${{ secrets.NOTE_STORAGE_STATE_JSON }}
          IS_PUBLIC: ${{ github.event.inputs.is_public || 'false' }}
          DRY_RUN: ${{ github.event.inputs.dry_run || 'true' }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_JOB: publish
      
      - name: Publishing Job Summary
        if: always()
        run: |
          JOB_END_TIME=$(date -u +%s)
          JOB_DURATION=$((JOB_END_TIME - JOB_START_TIME))
          echo "## üì§ Publishing Job Results" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Duration:** ${JOB_DURATION}s" >> $GITHUB_STEP_SUMMARY
          if [ -f "outputs/publishing-results.json" ]; then
            echo "**Result:** $(jq -r '.status' outputs/publishing-results.json)" >> $GITHUB_STEP_SUMMARY
            echo "**Success:** $(jq -r '.success' outputs/publishing-results.json)" >> $GITHUB_STEP_SUMMARY
            if [ "$(jq -r '.noteUrl' outputs/publishing-results.json)" != "null" ]; then
              echo "**Note URL:** $(jq -r '.noteUrl' outputs/publishing-results.json)" >> $GITHUB_STEP_SUMMARY
            fi
            echo "**Screenshots:** $(jq -r '.screenshots | length' outputs/publishing-results.json)" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload Screenshots
        if: ${{ hashFiles('outputs/screenshots/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: publishing-screenshots
          path: outputs/screenshots/
          retention-days: 7
          if-no-files-found: ignore
      
      - name: Upload Publishing Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: publishing-results
          path: outputs/publishing-results.json
          retention-days: 7
      
      - name: Upload Error Reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: publishing-errors
          path: outputs/errors/
          retention-days: 7
      
      - name: Upload Monitoring Data
        if: ${{ hashFiles('outputs/monitoring/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: publishing-monitoring
          path: outputs/monitoring/
          retention-days: 3
          if-no-files-found: ignore

  # ÂåÖÊã¨ÁöÑ„Å™„ÉØ„Éº„ÇØ„Éï„É≠„Éº„É¨„Éù„Éº„ÉàÁîüÊàê
  workflow-summary:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [research, writing, fact-check, publish]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download All Monitoring Data
        uses: actions/download-artifact@v4
        with:
          pattern: "*-monitoring"
          path: monitoring-data/
          merge-multiple: true
        continue-on-error: true
      
      - name: Download All Error Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-errors"
          path: error-data/
          merge-multiple: true
        continue-on-error: true
      
      - name: Generate Comprehensive Report
        run: node utils/generate-workflow-report.js
        env:
          GITHUB_RUN_ID: ${{ github.run_id }}
          WORKFLOW_START_TIME: ${{ env.WORKFLOW_START_TIME }}
          RESEARCH_STATUS: ${{ needs.research.result }}
          WRITING_STATUS: ${{ needs.writing.result }}
          FACT_CHECK_STATUS: ${{ needs.fact-check.result }}
          PUBLISH_STATUS: ${{ needs.publish.result }}
      
      - name: Final Workflow Summary
        if: always()
        run: |
          WORKFLOW_END_TIME=$(date -u +%s)
          TOTAL_DURATION=$((WORKFLOW_END_TIME - WORKFLOW_START_TIME))
          echo "# üéâ Workflow Completed" >> $GITHUB_STEP_SUMMARY
          echo "**Total Duration:** ${TOTAL_DURATION}s" >> $GITHUB_STEP_SUMMARY
          echo "**Research:** ${{ needs.research.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Writing:** ${{ needs.writing.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Fact Check:** ${{ needs.fact-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Publishing:** ${{ needs.publish.result }}" >> $GITHUB_STEP_SUMMARY
          
          # ÊàêÂäüÁéá„ÇíË®àÁÆó
          SUCCESS_COUNT=0
          if [ "${{ needs.research.result }}" = "success" ]; then SUCCESS_COUNT=$((SUCCESS_COUNT + 1)); fi
          if [ "${{ needs.writing.result }}" = "success" ]; then SUCCESS_COUNT=$((SUCCESS_COUNT + 1)); fi
          if [ "${{ needs.fact-check.result }}" = "success" ]; then SUCCESS_COUNT=$((SUCCESS_COUNT + 1)); fi
          if [ "${{ needs.publish.result }}" = "success" ]; then SUCCESS_COUNT=$((SUCCESS_COUNT + 1)); fi
          
          SUCCESS_RATE=$((SUCCESS_COUNT * 25))
          echo "**Success Rate:** ${SUCCESS_RATE}%" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "outputs/workflow-report.json" ]; then
            echo "**API Calls:** $(jq -r '.apiUsage.summary.totalAPICalls' outputs/workflow-report.json)" >> $GITHUB_STEP_SUMMARY
            echo "**API Success Rate:** $(jq -r '.apiUsage.summary.overallSuccessRate')%" outputs/workflow-report.json >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload Comprehensive Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: workflow-comprehensive-report
          path: outputs/workflow-report.json
          retention-days: 30
      
      - name: Upload Performance Analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-analysis
          path: outputs/performance-analysis.json
          retention-days: 30